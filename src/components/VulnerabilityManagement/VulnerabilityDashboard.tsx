import React, { useState, useEffect } from 'react';
import { Shield, AlertTriangle, Search, RefreshCw } from 'lucide-react';
import { fetchVulnerabilities, getLastUpdateTime } from '../../services/threatIntel/vulnerabilities';
import type { Vulnerability } from '../../types/threatIntel';
import VulnerabilityCard from './VulnerabilityCard';
import SearchBar from './SearchBar';

export default function VulnerabilityDashboard() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [lastUpdate, setLastUpdate] = useState<string | null>(null);

  useEffect(() => {
    const loadVulnerabilities = async () => {
      try {
        setLoading(true);
        setError(null);
        const currentYear = new Date().getFullYear();
        const data = await fetchVulnerabilities(currentYear);
        setVulnerabilities(data);
        setLastUpdate(getLastUpdateTime());
      } catch (err) {
        setError('Failed to load vulnerabilities. Please try again later.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    loadVulnerabilities();
  }, []);

  const filteredVulnerabilities = vulnerabilities.filter((vuln) =>
    vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
    vuln.id.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleRefresh = async () => {
    const currentYear = new Date().getFullYear();
    try {
      setLoading(true);
      const data = await fetchVulnerabilities(currentYear);
      setVulnerabilities(data);
      setLastUpdate(getLastUpdateTime());
    } catch (err) {
      setError('Failed to refresh vulnerabilities. Please try again later.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (error) {
    return (
      <div className="bg-gray-800 rounded-lg p-6">
        <div className="text-center py-8">
          <AlertTriangle className="w-12 h-12 mx-auto mb-4 text-red-500" />
          <p className="text-red-400">{error}</p>
          <button
            onClick={handleRefresh}
            className="mt-4 px-4 py-2 bg-blue-800 hover:bg-blue-700 rounded-lg text-sm"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-800 rounded-lg p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-xl font-semibold">Vulnerability Management</h2>
          {lastUpdate && (
            <p className="text-sm text-gray-400 mt-1">
              Last updated: {new Date(lastUpdate).toLocaleString()}
            </p>
          )}
        </div>
        <div className="flex items-center space-x-4">
          <SearchBar value={searchTerm} onChange={setSearchTerm} />
          <button
            onClick={handleRefresh}
            className="p-2 hover:bg-gray-700 rounded-lg transition-colors"
            title="Refresh vulnerabilities"
          >
            <RefreshCw className="w-5 h-5" />
          </button>
        </div>
      </div>

      {loading ? (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-400">Loading vulnerabilities...</p>
        </div>
      ) : filteredVulnerabilities.length === 0 ? (
        <div className="text-center py-8">
          <Shield className="w-12 h-12 mx-auto mb-4 text-gray-500" />
          <p className="text-gray-400">
            {searchTerm ? 'No vulnerabilities match your search' : 'No vulnerabilities found'}
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          <p className="text-sm text-gray-400 mb-4">
            Found {filteredVulnerabilities.length} vulnerabilities
          </p>
          {filteredVulnerabilities.map((vuln) => (
            <VulnerabilityCard key={vuln.id} vulnerability={vuln} />
          ))}
        </div>
      )}
    </div>
  );
}