import type { ThreatFeed } from '../../../types';
import { parseCSVData } from '../../utils/parser';

interface ExploitEntry {
  id: string;
  file: string;
  description: string;
  date: string;
  author: string;
  platform: string;
  type: string;
}

export async function fetchExploitIndicators(): Promise<ThreatFeed[]> {
  try {
    const response = await fetch('/data/exploits.csv');
    if (!response.ok) return [];

    const text = await response.text();
    const exploits = parseCSVData<ExploitEntry>(text);

    return exploits.slice(0, 10).map(exploit => ({
      id: crypto.randomUUID(),
      source: 'ExploitDB',
      type: 'Exploit',
      indicators: [exploit.file],
      timestamp: exploit.date || new Date().toISOString(),
      severity: 'critical',
      description: exploit.description
    }));
  } catch (error) {
    console.error('Error fetching ExploitDB data:', error);
    return [];
  }
}