import type { Vulnerability } from '../../types/threatIntel';
import { getCachedVulnerabilities, setCachedVulnerabilities, getLastUpdateTime } from './utils/cache';
import { getMockVulnerabilities } from './utils/mock';
import API from './utils/api';

export class VulnerabilityService {
  static async fetchVulnerabilities(year: number): Promise<Vulnerability[]> {
    try {
      const cached = getCachedVulnerabilities(year);
      if (cached) {
        return cached;
      }

      const vulnerabilities = getMockVulnerabilities();
      setCachedVulnerabilities(year, vulnerabilities);
      
      return vulnerabilities;
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
      return [];
    }
  }

  static getLastUpdateTime(): string | null {
    return getLastUpdateTime();
  }

  static async refreshData(): Promise<void> {
    try {
      const [threatData, exploits] = await Promise.all([
        API.fetchThreatData(),
        API.fetchExploits()
      ]);

      // Process and store the refreshed data
      console.log('Data refreshed:', { threatData, exploits });
    } catch (error) {
      console.error('Error refreshing data:', error);
      throw error;
    }
  }
}